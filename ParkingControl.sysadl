Model SysADLModel ; using ParkingControlCPD.gateControllerCP ; package SysADL.types { value type Int { } value type Boolean { } value type String { } value type Void { } value type Real { } } package ParkingControlCPD {
	component def SpaceSensorCP { }
	component def SpaceIndicatorCP { } boundary
	component def TicketReaderCP { } boundary
	component def RFIDReaderCP { } boundary
	component def LicensePlateReaderCP { }
	component def gateControllerCP { component def gateControllerCP { } }
	component def DriverControllerCP { }
	component def PaymentControllerCP { } } Requirement ParkingControlFR ( 1 ) { text = "The system must control a parking lot." derive ParkingSpaceControlFR , ParkingEntranceControlFR , VehicleControlFR , PaymentControlFR ; } Requirement ParkingSpaceControlFR ( 1.1 ) { text = "The system must control the occupied spaces." satisfied by ParkingControlCPD.SpaceSensorCP ; derive ParkingSpaceIndicatorFR ; } Requirement ParkingEntranceControlFR ( 1.2 ) { text = "The system must control the parking gates." derive AutomaticGateControlFR , ManualGateControlFR ; } Requirement VehicleControlFR ( 1.3 ) { text = "The system must be able to identify the driver of the vehicle." derive AssociationControlFR , AunteticityControlFR ; } Requirement PaymentControlFR ( 1.4 ) { text = "The system must be able to control payments for the time spent in the parking lot" derive CalculateValueFR , UpdateTariffFR ; } Requirement ParkingSpaceIndicatorFR ( 1.1.1 ) { text = "The system must be capable of indicating to the driver where and how much free stop the parking lot has" satisfied by ParkingControlCPD.SpaceIndicatorCP ; } Requirement ClearIndicationNFR ( 1.1.2 ) { text = "The system must indicate the spaces clearly for the driver" derive ParkingSpaceIndicatorFR ; } Requirement AutomaticGateControlFR ( 1.2.1 ) { text = "The system must be capable of control the gates automatically" satisfied by ParkingControlCPD.gateControllerCP ; derive TicketReadingFR , RFIDReadingFR , LicensePlateReadingFR ; } Requirement ManualGateControlFR ( 1.2.2 ) { text = "The system must allow for manual control of the gates." } Requirement TicketReadingFR ( 1.2.1.1 ) { text = "The system must be able to read printed tickets." satisfied by ParkingControlCPD.TicketReaderCP ; } Requirement RFIDReadingFR ( 1.2.1.2 ) { text = "The system must be able to read printed tickets." satisfied by ParkingControlCPD.RFIDReaderCP ; } Requirement LicensePlateReadingFR ( 1.2.1.3 ) { text = "The system must be able to read license plates." satisfied by ParkingControlCPD.LicensePlateReaderCP ; } Requirement AunteticityControlFR ( 1.3.1 ) { text = "The system must be able to autenticate that the driver could drive the car" satisfied by ParkingControlCPD.DriverControllerCP ; derive MultipleDriverControlFR ; } Requirement AssociationControlFR ( 1.3.2 ) { text = "The system must associate the entrance method with a vehicle" satisfied by ParkingControlCPD.DriverControllerCP ; } Requirement MultipleDriverControlFR ( 1.3.1.1 ) { text = "The system must be able to add authorized people to a specific car" } Requirement CalculateValueFR ( 1.4.1 ) { text = "The system must be able to calculate the value automatically" satisfied by ParkingControlCPD.PaymentControllerCP ; } Requirement CorrectnessNFR ( 1.4.1.1 ) { text = "The calculation algorithm must be correct" derive CalculateValueFR ; } Requirement UpdateTariffFR ( 1.4.2 ) { text = "The system must permit that a system administrator change the tariff of the parking lot" satisfied by ParkingControlCPD.PaymentControllerCP ; } Requirement ReadersPerformanceNFR ( 1.2.1.4 ) { text = "Any entrance reading must not exceed 10 seconds" derive TicketReadingFR , RFIDReadingFR , LicensePlateReadingFR ; } Requirement AuthorizedUseNFR ( 1.2.2.1 ) { text = "Only authorized people must use the manual control." derive ManualGateControlFR ; }